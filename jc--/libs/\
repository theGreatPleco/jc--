#ifndef MAP_H
#define MAP_H 1
#include "../decl.h"
#include "data.h"
#include "jieidecl.h"
#include "jieidefs.h"
#include "stdlib.h"

class map {
  typedef struct chunk {
    token *tok;
    const byte *val;
    u32 isused;
  } chunk;
  const u32 MAX = (1 << 11) * sizeof(chunk);
  chunk *chunks[(1 << 11) * sizeof(chunk)];
  u32 getindex(const byte *key) {
    u32 hash = 5381;
    for (byte *trav = (byte *)key; *trav;) {
      hash = ((hash << 5) + hash) + *trav;
      assert(trav);
      trav++;
    }
    hash = hash % MAX;
    assert(hash < MAX);
    return hash;
  }

  chunk *createchunk(token *tok, const byte *val, u32 isused) {
    chunk *next = (chunk *)malloc(sizeof(chunk));
    next->tok = tok;
    next->val = val;
    next->isused = isused;
    return next;
  }

public:
  map() { init(); }
  void init() {
    for (u32 i = 0; i < MAX; i++) {
      chunks[i] = createchunk(0, 0, 0);
    }
  }
  void insert(const byte *key, token *tok) { u32 index = getindex(key); }
};

#endif
